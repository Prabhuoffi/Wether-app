{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prabh\\\\OneDrive\\\\Documents\\\\html\\\\Desktop\\\\Weather-App\\\\src\\\\components\\\\HourlyChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { AreaChart, Area, XAxis, YAxis, Legend, Tooltip } from 'recharts';\nimport { DataContext } from './DataContext';\nimport { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherChart = () => {\n  _s();\n  const [temperatureData, setTemperatureData] = useState([]);\n  const {\n    weatherData\n  } = useContext(DataContext);\n  const convertToIST = timestamp => {\n    const date = new Date(timestamp);\n    const ISTOffset = 330; // IST offset from UTC in minutes\n    const utc = date.getTime() + date.getTimezoneOffset() * 60000;\n    const ist = new Date(utc + ISTOffset * 60000);\n    return ist;\n  };\n  useEffect(() => {\n    if (weatherData) {\n      const apiKey = 'd7ddcaaf3a176d61e7db6e5f7d7f3996';\n      const city = weatherData.name;\n\n      // Fetch hourly weather data for today and tomorrow\n      const today = new Date().toISOString().slice(0, 10); // Get today's date in 'YYYY-MM-DD' format\n      const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().slice(0, 10); // Get tomorrow's date\n      axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`).then(response => {\n        const todayData = response.data.list.filter(item => item.dt_txt.startsWith(today));\n        const tomorrowData = response.data.list.filter(item => item.dt_txt.startsWith(tomorrow));\n        const combinedData = [...todayData, ...tomorrowData];\n        const hourlyData = combinedData.map(item => ({\n          timestamp: item.dt * 1000,\n          time: convertToIST(item.dt * 1000),\n          // Convert timestamp to IST\n          temperature: item.main.temp\n        }));\n        setTemperatureData(hourlyData);\n      }).catch(error => {\n        console.error('Error fetching weather data:', error);\n      });\n    }\n  }, [weatherData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pt-20 px-40\",\n    children: /*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 1150,\n      height: 300,\n      data: temperatureData,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"timestamp\",\n        tickFormatter: timestamp => {\n          const time = convertToIST(timestamp);\n          return `${time.getHours()}:${time.getMinutes()}`;\n        },\n        interval: 0,\n        padding: {\n          left: 10,\n          right: 10\n        },\n        tick: {\n          fill: 'white',\n          fontSize: 13\n        },\n        axisLine: {\n          stroke: 'white'\n        } // Display every data point\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"temperature\",\n        hide: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        labelFormatter: label => {\n          const time = convertToIST(label);\n          const ISTTime = new Date(label);\n          const hours = ISTTime.getHours();\n          const minutes = ISTTime.getMinutes();\n          const ampm = hours >= 12 ? 'PM' : 'AM';\n          const formattedTime = `${time.toDateString()} ${hours % 12 || 12}:${minutes < 10 ? '0' : ''}${minutes} ${ampm}`;\n          return formattedTime;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"temperature\",\n        fill: \"white\",\n        stroke: \"white\",\n        name: \"Hourly Temperature (\\xB0C)\",\n        fillOpacity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherChart, \"RkqhWXj1jlkqYl+VlNObaPUJEOU=\");\n_c = WeatherChart;\nexport default WeatherChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherChart\");","map":{"version":3,"names":["React","useEffect","useState","axios","AreaChart","Area","XAxis","YAxis","Legend","Tooltip","DataContext","useContext","jsxDEV","_jsxDEV","WeatherChart","_s","temperatureData","setTemperatureData","weatherData","convertToIST","timestamp","date","Date","ISTOffset","utc","getTime","getTimezoneOffset","ist","apiKey","city","name","today","toISOString","slice","tomorrow","now","get","then","response","todayData","data","list","filter","item","dt_txt","startsWith","tomorrowData","combinedData","hourlyData","map","dt","time","temperature","main","temp","catch","error","console","className","children","width","height","dataKey","tickFormatter","getHours","getMinutes","interval","padding","left","right","tick","fill","fontSize","axisLine","stroke","fileName","_jsxFileName","lineNumber","columnNumber","hide","labelFormatter","label","ISTTime","hours","minutes","ampm","formattedTime","toDateString","type","fillOpacity","_c","$RefreshReg$"],"sources":["C:/Users/prabh/OneDrive/Documents/html/Desktop/Weather-App/src/components/HourlyChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { AreaChart, Area, XAxis, YAxis, Legend, Tooltip } from 'recharts';\r\nimport { DataContext } from './DataContext';\r\nimport { useContext } from 'react';\r\n\r\nconst WeatherChart = () => {\r\n\r\n  const [temperatureData, setTemperatureData] = useState([]);\r\n  const { weatherData } = useContext(DataContext);\r\n\r\n  const convertToIST = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const ISTOffset = 330; // IST offset from UTC in minutes\r\n    const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\r\n    const ist = new Date(utc + (ISTOffset * 60000));\r\n    return ist;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (weatherData) {\r\n      const apiKey = 'd7ddcaaf3a176d61e7db6e5f7d7f3996';\r\n      const city = weatherData.name;\r\n\r\n      // Fetch hourly weather data for today and tomorrow\r\n      const today = new Date().toISOString().slice(0, 10); // Get today's date in 'YYYY-MM-DD' format\r\n      const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().slice(0, 10); // Get tomorrow's date\r\n      axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`)\r\n        .then(response => {\r\n          const todayData = response.data.list.filter(item => item.dt_txt.startsWith(today));\r\n          const tomorrowData = response.data.list.filter(item => item.dt_txt.startsWith(tomorrow));\r\n          const combinedData = [...todayData, ...tomorrowData];\r\n          const hourlyData = combinedData.map(item => ({\r\n            timestamp: item.dt * 1000,\r\n            time: convertToIST(item.dt * 1000), // Convert timestamp to IST\r\n            temperature: item.main.temp,\r\n          }));\r\n          setTemperatureData(hourlyData);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching weather data:', error);\r\n        });\r\n    }\r\n\r\n  }, [weatherData]);\r\n\r\n  return (\r\n    <div className=\"pt-20 px-40\">\r\n\r\n      <AreaChart width={1150} height={300} data={temperatureData}>\r\n        <XAxis\r\n          dataKey=\"timestamp\"\r\n          tickFormatter={(timestamp) => {\r\n            const time = convertToIST(timestamp);\r\n            return `${time.getHours()}:${time.getMinutes()}`;\r\n          }}\r\n          interval={0}\r\n          padding={{ left: 10, right: 10 }}\r\n          tick={{ fill: 'white', fontSize: 13 }}\r\n          axisLine={{ stroke: 'white' }} // Display every data point\r\n        />\r\n        <YAxis dataKey=\"temperature\" hide />\r\n        <Tooltip\r\n  labelFormatter={(label) => {\r\n    const time = convertToIST(label);\r\n    const ISTTime = new Date(label);\r\n    const hours = ISTTime.getHours();\r\n    const minutes = ISTTime.getMinutes();\r\n    const ampm = hours >= 12 ? 'PM' : 'AM';\r\n    const formattedTime = `${time.toDateString()} ${hours % 12 || 12}:${minutes < 10 ? '0' : ''}${minutes} ${ampm}`;\r\n    return formattedTime;\r\n  }}\r\n/>\r\n\r\n        <Legend />\r\n        <Area type=\"monotone\" dataKey=\"temperature\" fill=\"white\" stroke=\"white\" name=\"Hourly Temperature (Â°C)\" fillOpacity={0.3} />\r\n      </AreaChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}